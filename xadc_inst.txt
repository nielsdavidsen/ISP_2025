----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 03/25/2025 02:14:25 PM
-- Design Name: 
-- Module Name: xadc_test - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity xadc_inst is
        Port ( clk : in STD_LOGIC;
               reset : in std_logic;
               adc_out : out STD_LOGIC_VECTOR (11 downto 0);
               adc_in : in STD_LOGIC_VECTOR (1 downto 0)
);
end xadc_inst;

architecture Behavioral of xadc_inst is

COMPONENT xadc_wiz_0
  PORT (
    daddr_in        : in  STD_LOGIC_VECTOR (6 downto 0);     -- Address bus for the dynamic reconfiguration port
    den_in          : in  STD_LOGIC;                         -- Enable Signal for the dynamic reconfiguration port
    di_in           : in  STD_LOGIC_VECTOR (15 downto 0);    -- Input data bus for the dynamic reconfiguration port
    dwe_in          : in  STD_LOGIC;                         -- Write Enable for the dynamic reconfiguration port
    do_out          : out  STD_LOGIC_VECTOR (15 downto 0);   -- Output data bus for dynamic reconfiguration port
    drdy_out        : out  STD_LOGIC;                        -- Data ready signal for the dynamic reconfiguration port
    dclk_in         : in  STD_LOGIC;                         -- Clock input for the dynamic reconfiguration port
    reset_in        : in  STD_LOGIC;                         -- Reset signal for the System Monitor control logic
    vauxp6          : in  STD_LOGIC;                         -- Auxiliary Channel 6
    vauxn6          : in  STD_LOGIC;
    busy_out        : out  STD_LOGIC;                        -- ADC Busy signal
    channel_out     : out  STD_LOGIC_VECTOR (4 downto 0);    -- Channel Selection Outputs
    eoc_out         : out  STD_LOGIC;                        -- End of Conversion Signal
    eos_out         : out  STD_LOGIC;                        -- End of Sequence Signal
    alarm_out       : out STD_LOGIC;                         -- OR'ed output of all the Alarms
    vp_in           : in  STD_LOGIC;                         -- Dedicated Analog Input Pair
    vn_in           : in  STD_LOGIC
  );
END COMPONENT;


signal channel_out  : std_logic_vector(4 downto 0);
signal daddr_in     : std_logic_vector(6 downto 0);
signal eoc_out      : std_logic;
signal do_out  : std_logic_vector(15 downto 0);  
signal anal_p, anal_n : std_logic;
 
    

begin

inst_xadc : xadc_wiz_0 
      port map
      (
        daddr_in        => daddr_in,
        den_in          => eoc_out,
        di_in           => "0000000000000000",
        dwe_in          => '0',
        do_out          => do_out,
        drdy_out        => open,
        dclk_in         => clk,
        reset_in        => reset,
        vauxp6          => anal_p,
        vauxn6          => anal_n,
        busy_out        => open,
        channel_out     => channel_out,
        eoc_out         => eoc_out,
        eos_out         => open,
        alarm_out       => open,
        vp_in           => '0',
        vn_in           => '0'
        );
        
daddr_in <= "00" & channel_out;
anal_p <= adc_in(0);
anal_n <= adc_in(1);

process(clk)
begin 
  if rising_edge(clk) then
    if reset = '1' then
        adc_out <= (others => '0');

    elsif reset = '0' then
        adc_out <= do_out(15 downto 4);

    end if;      
      
  end if;
end process;


end Behavioral;
